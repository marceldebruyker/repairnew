---
import { urlFor } from '../lib/sanity'
interface ImageRef { alt?: string }
const { images = [] } = Astro.props as { images: ImageRef[] }

const thumbs = images.map((img: any) => ({
  alt: img.alt ?? 'Galeriebild',
  thumb: {
    src: urlFor(img).width(800).auto('format').quality(80).url(),
    srcset: [
      urlFor(img).width(480).auto('format').quality(70).url() + ' 480w',
      urlFor(img).width(800).auto('format').quality(80).url() + ' 800w',
      urlFor(img).width(1200).auto('format').quality(80).url() + ' 1200w',
    ].join(', '),
    sizes: '(min-width: 1024px) 33vw, (min-width: 640px) 50vw, 100vw',
  },
  full: urlFor(img).width(1600).auto('format').quality(80).url(),
}))
---
<div data-gallery-root class="mt-6">
  <div class="columns-1 sm:columns-2 md:columns-3 gap-4 [column-fill:_balance]">
    {thumbs.map((g, idx) => (
      <button type="button" data-index={idx} class="group mb-4 w-full break-inside-avoid overflow-hidden rounded-xl ring-1 ring-slate-700 focus:outline-none focus:ring-2 focus:ring-brand-500">
        <img
          src={g.thumb.src}
          srcset={g.thumb.srcset}
          sizes={g.thumb.sizes}
          alt={g.alt}
          loading="lazy" decoding="async"
          class="w-full transition-transform duration-300 ease-out group-hover:scale-[1.02]"
        />
      </button>
    ))}
  </div>

  <!-- Lightbox -->
  <div data-lightbox class="fixed inset-0 z-50 hidden items-center justify-center">
    <div data-backdrop class="absolute inset-0 bg-black/80"></div>
    <figure class="relative mx-auto max-w-5xl px-4">
      <img data-lightbox-img class="mx-auto max-h-[80vh] w-auto rounded-xl shadow-2xl" alt="" />
      <figcaption data-caption class="mt-3 text-center text-sm text-slate-300"></figcaption>
      <button data-close aria-label="Schließen" class="absolute -top-10 right-2 rounded-full bg-slate-800/80 p-2 text-slate-200 hover:bg-slate-700">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-6 w-6"><path fill-rule="evenodd" d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z" clip-rule="evenodd"/></svg>
      </button>
      <button data-prev aria-label="Vorheriges Bild" class="absolute left-0 top-1/2 -translate-y-1/2 rounded-full bg-slate-800/80 p-3 text-slate-200 hover:bg-slate-700">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-6 w-6"><path fill-rule="evenodd" d="M15.53 4.47a.75.75 0 010 1.06L9.06 12l6.47 6.47a.75.75 0 11-1.06 1.06l-7-7a.75.75 0 010-1.06l7-7a.75.75 0 011.06 0z" clip-rule="evenodd"/></svg>
      </button>
      <button data-next aria-label="Nächstes Bild" class="absolute right-0 top-1/2 -translate-y-1/2 rounded-full bg-slate-800/80 p-3 text-slate-200 hover:bg-slate-700">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-6 w-6"><path fill-rule="evenodd" d="M8.47 4.47a.75.75 0 000 1.06L14.94 12l-6.47 6.47a.75.75 0 001.06 1.06l7-7a.75.75 0 000-1.06l-7-7a.75.75 0 00-1.06 0z" clip-rule="evenodd"/></svg>
      </button>
    </figure>
  </div>

  <script>
    // Simple lightbox with keyboard, arrows, and backdrop
    const root = document.currentScript?.parentElement?.closest('[data-gallery-root]') || document.querySelector('[data-gallery-root]');
    if (root) {
      const items = Array.from(root.querySelectorAll('[data-index]'));
      const lb = root.querySelector('[data-lightbox]');
      const img = root.querySelector('[data-lightbox-img]');
      const caption = root.querySelector('[data-caption]');
      const closeBtn = root.querySelector('[data-close]');
      const prevBtn = root.querySelector('[data-prev]');
      const nextBtn = root.querySelector('[data-next]');
      const backdrop = root.querySelector('[data-backdrop]');
      const data = {JSON.stringify(thumbs)};
      let index = 0;

      const show = (i) => {
        index = (i + data.length) % data.length;
        const item = data[index];
        img.src = item.full;
        img.alt = item.alt || '';
        caption.textContent = item.alt || '';
        // preload neighbors
        [1, -1].forEach((o) => { const preload = new Image(); preload.src = data[(index + o + data.length)%data.length].full; });
      };
      const open = (i) => {
        show(i);
        lb.classList.remove('hidden');
        lb.classList.add('flex');
        document.body.style.overflow = 'hidden';
      };
      const close = () => {
        lb.classList.add('hidden');
        lb.classList.remove('flex');
        document.body.style.overflow = '';
      };
      items.forEach((el) => el.addEventListener('click', () => open(Number(el.getAttribute('data-index')))));
      closeBtn?.addEventListener('click', close);
      backdrop?.addEventListener('click', close);
      prevBtn?.addEventListener('click', () => show(index - 1));
      nextBtn?.addEventListener('click', () => show(index + 1));
      document.addEventListener('keydown', (e) => {
        if (lb.classList.contains('hidden')) return;
        if (e.key === 'Escape') close();
        if (e.key === 'ArrowLeft') show(index - 1);
        if (e.key === 'ArrowRight') show(index + 1);
      });
    }
  </script>
</div>
